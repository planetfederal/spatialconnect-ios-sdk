'use strict';

var actions = require('./actions.json');
var fs = require('fs');
var _ = require('lodash');
var Rx = require('rx');

if (process.argv.length !== 3) {
  console.log('You must enter objc or java to produce command output');
  return;
}

var arg = process.argv[2];

if (arg === 'objc') {

  var objchead = '/*This file is autogenerated. Do not edit.*/\n#ifndef SpatialConnect_Commands_h\n' +
  '#define SpatialConnect_Commands_h\n\n';

  //Objective-C Output
  var first = true;
  Rx.Observable.create((sub) => {
    _.mapKeys(actions,(v,k) => {
      var val = '';
      if (!first) {
        val += ',\n';
      }
      val += '\t' + k + ' = ' + v;
      sub.onNext(val);
      first = false;
    });
    sub.onCompleted();
  }).reduce((acc,v) => {
    return acc + v;
  },objchead+'typedef NS_ENUM(NSInteger, SCCommand) {\n')
    .subscribe(
      (d) => {
        fs.writeFileSync('Commands.h',d+'\n};\n#endif');
      }
    );

} else if (arg === 'java') {
  var javahead = 'package com.boundlessgeo.spatialconnect.schema;\n\n';
  var javabody = `\n    private final int actionNumber;

    SCCommand(int actionNumber) {
        this.actionNumber = actionNumber;
    }

    public int value() {
        return actionNumber;
    }

    public static SCCommand fromActionNumber(int actionNumber) {
        for (SCCommand v : values()) {
            if (v.actionNumber == actionNumber) {
                return v;
            }
        }
        throw new IllegalArgumentException(
            String.valueOf(actionNumber) + " is not an action number associated with a SCCommand."
        );
    }
    \n`;
  first = true;
  Rx.Observable.create((sub) => {
    _.mapKeys(actions,(v,k) => {
      var val = '';
      if (!first) {
        val += ',\n';
      }
      val += '\t' + k + '(' + v + ')';
      sub.onNext(val);
      first = false;
    });
    sub.onCompleted();
  }).reduce((acc,v) => {
    return acc + v;
  },javahead+'public enum SCCommand {\n\n')
    .subscribe(
      (d) => {
        fs.writeFileSync('SCCommand.java',d+';\n'+ javabody +'};\n');
      }
    );
}
